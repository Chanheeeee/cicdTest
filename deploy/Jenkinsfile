pipeline {
  agent any //master, slave 구성 일단 없기에 any
  
  tools { 
      maven 'mvn' 
      jdk 'jdk' 
  }


  parameters { // 젠킨스 파이프라인 구동시에 넘겨받는 argument
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'RUN_TEST', defaultValue : true, description : 'RUN_TEST')
    booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description : 'PUSH_DOCKER_IMAGE')
    
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '900184409169', description : 'AWS_ACCOUNT_ID')
    string(name : 'REPOSITORY_NAME', defaultValue : 'l23121-cicd-test', description : 'DOCKER_IMAGE_NAME')
    string(name : 'REPOSITORY_TAG', defaultValue : 'v1', description : 'DOCKER_TAG')
    
    // CD
    string(name : 'TARGET_SVR_USER', defaultValue : 'ec2-user', description : 'TARGET_SVR_USER')
    string(name : 'TARGET_SVR_PATH', defaultValue : '/home/ec2-user/', description : 'TARGET_SVR_PATH')
    string(name : 'TARGET_SVR', defaultValue : '20.0.1.233', description : 'TARGET_SVR')

  }

  environment { // 전체 스테이지에서 접근가능한 환경변수
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
    DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.REPOSITORY_NAME}:${params.REPOSITORY_TAG}"
  }

  stages {
    
   stage ('Initialize') {
      steps {
          sh '''
              echo "PATH = ${PATH}"
              echo "MAVEN_HOME = ${MAVEN_HOME}"
'''
      }
   }
    
   stage('============ Build Java ============') { 
     
        steps {
          
          
           dir("${env.WORKSPACE}") { 
              echo 'This is a mvn build step for java code.' 
              sh 'mvn -B -DskipTests clean package' 
           }
        }
    }
  
    stage('============ Build Docker Image ============') {
        when { 
            expression { return params.BUILD_DOCKER_IMAGE } 
        }
       
        steps {
          dir("${env.WORKSPACE}") { 
            sh 'ls'
            sh 'docker build -t ${DOCKER_IMAGE} .' // -t test:1
          }

            echo "Stage Build"
            echo "성공성공"
        }
        post {
            always {
                echo " Docker Build Success "
            }
        }
    }
    
    stage('============ Push Docker Image To ECR ============') {
        when { 
            expression { return params.PUSH_DOCKER_IMAGE } 
        }
       
        steps {
          echo "Stage Test"
          sh '''
             aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
             docker push ${DOCKER_IMAGE}
 '''
        }
        post {
            always {
                echo " Docker Build Success "
            }
        }
    }
    

    stage('============ Deploy workload ============') {
        //when { expression { return params.DEPLOY_WORKLOAD } }
        steps {
            sshagent (credentials: ['aws-l23121-ssh']) {
                sh """#!/bin/bash
                    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
                        ${params.TARGET_SVR_USER}@${params.TARGET_SVR} \
                        'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}; \
                         export IMAGE=${ECR_DOCKER_IMAGE}; \
                         export TAG=${ECR_DOCKER_TAG}; \
                         docker pull ${DOCKER_IMAGE}
                         
                """
              }
          }
     
    }
   
           
  }
}
